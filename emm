#!/usr/bin/env bash
# emmmmmmmmmmmm BASED ON MacOS.
# @author x1ankun <ge2x3k2@gmail.com>
# @time 2017-10-7
# @version v3.0.1

# set -x
# Read the command configuration file
config_path='/etc/emm/default.conf'
# version number
version_number='v3.0.1'
# set profile
profile_path=''

# There must be a parameter
if [[ $# == 0 ]]; then echo -e "failed: because there is no parameter that leads to failure.\nuse 'emm -l' View the available parameters";exit 1; fi

# The configuration dir must exist
if [[ ! -d ${config_path%%default.conf} ]]; then
	echo "initialization: mkdir -vp ${config_path%%default.conf}"
	sudo mkdir -vp ${config_path%%default.conf}
fi
# The configuration file must exist
if [[ ! -f ${config_path} ]]; then
	echo "initialization: touch ${config_path}"
	sudo touch ${config_path}
	sudo echo "#emm.conf" >> ${config_path}
	sudo echo "" >> ${config_path}
	echo "Initialized successfully."
fi

# Read
source $config_path

# help
_getHelp () {
	echo "Usage:  "
	echo "	-s 	: save a command to emm"
	echo "	-n <xxx>: the parameters that are essential when executing the '-s' command, the command alias"
	echo "	-e <xxx>: the parameters that are essential when executing the '-s' command, save the command to emm"
	echo "	-a  	: optional parameters when executing the '-s' command, turn on safe mode"
	echo "	-u <xxx>: optional parameters when executing the '-s' command, username"
	echo "	-p <xxx>: optional parameters when executing the '-s' command, password"
	echo " Example: emm -sn'name' -e'exec' -u'username' -p'password'"
	echo ""
	echo "	-d <xxx>: delete an existing command"
	echo "	-l 	: show the configuration file"
	echo "	-f 	: find for related configurations based on clues(-f'clues')"
	echo "	-c 	: add automatic completion for 'emm' command; ex: 'source emm -c'"
	echo ""
	echo "  	directly called the command to execute the formation, specified in the -e"
}

# getopts parameter analysis
while getopts "cslhvabd:u:n:p:e:f:" arg
do
        case $arg in
	    # Complete
	    c)
	    	complete -W "$(cat ${config_path} | grep "#" | cut -d'[' -f 2 | cut -d']' -f 1)" emm
	    	exit 0
	    ;;
        # Execute the save operation
        s) emm_save=1 ;;
    	# name
        n) emm_name="${OPTARG}" ;;
  	    # Name the call to the command
	    e) emm_exec="${OPTARG}" ;;
    	# turn on safe mode
        a) emm_safe=1 ;;
        # Account, present is displayed
        u) emm_user="${OPTARG}" ;;
        # Password, present is displayed
        p) emm_password="${OPTARG}" ;;
	    d) emm_delete="${OPTARG}" ;;
	    # alias
	    b) emm_alias=1 ;;
	    # find
	    f) emm_find="${OPTARG}" ;;
	    # list config
	    l) less ${config_path}; exit 0 ;;
	    # show version
	    v) echo "version: ${version_number}"; exit 0 ;;
	    # show help docs
	    h) _getHelp; exit 0 ;;
            ?) echo "unkonw argument"; exit 1 ;;
        esac
done

# elete an existing command
_delete () {
	if [[ -z ${emm_delete} ]]; then return 0; fi
	sudo sed -i "" "/\[${emm_delete}\]/d" ${config_path}
	sudo sed -i "" "/${emm_delete}_exec/d" ${config_path}
	sudo sed -i "" "/${emm_delete}_user/d" ${config_path}
	sudo sed -i "" "/${emm_delete}_password/d" ${config_path}
	sudo sed -i "" "/${emm_delete}_safe/d" ${config_path}
	exit 0
}

# find
_find () {
	sed -n "/${emm_find}/p" ${config_path}
	exit 0
}


# set alias
_setAlias () {
	echo "info: set the alias."
	if [[ ! -f ${profile_path} ]]; then
		ls ${profile_path}
		echo "alias setting failed. because the '${profile_path}' file does not exist."
		return 0
	fi
	echo "alias ${emm_name}='emm ${emm_name}'" >> ${profile_path}
	echo "info: the alias is set up successfully."
	return 0
}

# Save the operation of the command
_filling_file () {
	if [[ -z ${emm_save} ]]; then	return 0; fi

	if [[ -z ${emm_name} || -z ${emm_exec} ]]; then echo -e "failed: 'emm -s' requires at least '-e' and '-n' two parameters\nSee 'emm -h'";exit 1; fi

	sudo  echo "# [${emm_name}]" >> ${config_path}
	sudo  echo "${emm_name}_exec='${emm_exec}'" >> ${config_path}

	if [[ ! -z ${emm_user} ]]; then sudo echo "${emm_name}_user='${emm_user}'" >> ${config_path}; fi

	if [[ ! -z ${emm_password} ]]; then sudo echo "${emm_name}_password='${emm_password}'" >> ${config_path}; fi

	if [[ ! -z ${emm_safe} ]]; then sudo echo "${emm_name}_safe=1" >> ${config_path}; fi

	sudo echo "" >> ${config_path}

	if [[ ! -z ${emm_alias} ]]; then
		_setAlias
	fi

	echo "..."
	echo "create success."

	exit 0
}

# Safe mode
_safe () {
	read -n 1 -p 'the above statement will be executed, please approve[y/n]: ' state
	echo ""
	if [[ $state != 'y' ]]; then
		echo "bye.."
		exit 0
	fi
	echo -e "info: ${!eeec}"
}

# Execute named commands
_eeec () {
	eeec=$1_exec
	if [[ -z ${!eeec} ]]; then echo -e "failed: there is no viable command for this parameter\nuse the 'emm -sn -e' command to add";exit 1; fi

	local user=$1_user
	local password=$1_password
	local safe=$1_safe

	if [[ ${!safe} == '1' ]]; then _safe; fi

	if [[ ! -z ${!user} ]]; then echo -e "account:";echo "     ${!user}"; echo ""; fi
	if [[ ! -z ${!password} ]]; then echo "${!password}" | pbcopy; echo "The password has been copied to the clipboard, directly 'CTRL V' paste."; fi

	${!eeec}
	return 0
}

_filling_file

_delete

if [[ ! -z ${emm_find} ]]; then
	_find
fi

_eeec $1
exit 0

# End of file for emm
